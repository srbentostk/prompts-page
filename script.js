// Carrega os dados do JSON e popula a p√°gina
fetch('https://raw.githubusercontent.com/srbentostk/prompts/refs/heads/main/index.json')
    .then(response => response.json())
    .then(data => {
        // Armazena os dados globalmente
        window.promptData = data;
        // Atualiza o contador de prompts
        document.getElementById('prompt-count').textContent = data.length;
        displayPrompts(data);
    });

// Exibe os prompts no conte√∫do
function displayPrompts(data) {
    const content = document.getElementById('content');
    content.innerHTML = ''; // Limpa o conte√∫do

    data.forEach(prompt => {
        const promptCard = document.createElement('div');
        promptCard.classList.add('prompt-card');

        promptCard.innerHTML = `
            <table>
                <tr>
                    <td><strong>Nome:</strong></td>
                    <td>${prompt.nome}</td>
                </tr>
                <tr>
                    <td><strong>Descri√ß√£o:</strong></td>
                    <td>${prompt.descricao}</td>
                </tr>
                <tr>
                    <td><strong>Tags:</strong></td>
                    <td>${prompt.tags.join(', ')}</td>
                </tr>
                <tr>
                    <td colspan="2" style="text-align: right;">
                        <button class="open-prompt-button" data-url="${prompt.url}" data-nome="${prompt.nome}">Abrir Prompt</button>
                    </td>
                </tr>
            </table>
        `;

        content.appendChild(promptCard);
    });
    // Adicionar event listeners aos bot√µes "Abrir Prompt"
    const openButtons = document.querySelectorAll('.open-prompt-button');
    openButtons.forEach(button => {
        button.addEventListener('click', openPromptPopup);
    });
}
function openPromptPopup(event) {
    const url = event.target.getAttribute('data-url');
    const nome = event.target.getAttribute('data-nome');

    // Exibe o nome do prompt no popup
    document.getElementById('popup-prompt-name').textContent = nome;

    // Faz a requisi√ß√£o para obter o texto do prompt
    fetch(url)
        .then(response => response.text())
        .then(text => {
            if (text.trim().startsWith('```markdown')) {
                text = text.trim().slice(3).trim();
            }
            
             // Remove '```' do final, se existir
             if (text.trim().endsWith('```')) {
                text = text.trim().slice(0, -3).trim();
            }

            // Remove '```' do in√≠cio, se existir
            if (text.trim().startsWith('```')) {
                text = text.trim().slice(3).trim();
            }
            // Exibe o texto no popup
            document.getElementById('popup-prompt-text').textContent = text;

            // Exibe o popup
            document.getElementById('prompt-popup').classList.remove('hidden');
        })
        .catch(error => {
            console.error('Erro ao carregar o prompt:', error);
            alert('Ocorreu um erro ao carregar o prompt.');
        });
}
// Fecha o popup ao clicar no bot√£o de fechar
document.querySelector('.close-popup').addEventListener('click', () => {
    document.getElementById('prompt-popup').classList.add('hidden');
});

// Fecha o popup ao clicar fora do conte√∫do
document.getElementById('prompt-popup').addEventListener('click', (event) => {
    if (event.target === document.getElementById('prompt-popup')) {
        document.getElementById('prompt-popup').classList.add('hidden');
    }
});
// Event listener para o bot√£o "Copiar Texto":
document.getElementById('copy-button').addEventListener('click', () => {
    const promptText = document.getElementById('popup-prompt-text').textContent;
    navigator.clipboard.writeText(promptText).then(() => {
        alert('Texto copiado para a √°rea de transfer√™ncia!');
    }).catch(err => {
        console.error('Erro ao copiar o texto:', err);
    });
});
// Novo campo de pesquisa para filtrar prompts pelo texto
document.getElementById('prompt-search').addEventListener('input', function() {
    const query = this.value.toLowerCase();
    const filteredPrompts = window.promptData.filter(prompt =>
        prompt.nome.toLowerCase().includes(query) ||
        prompt.descricao.toLowerCase().includes(query) ||
        prompt.tags.some(tag => tag.toLowerCase().includes(query))
    );

    displayPrompts(filteredPrompts);

    // Atualiza o contador de prompts exibidos
    document.getElementById('prompt-count').textContent = filteredPrompts.length;
});
function filterPrompts() {
    const query = document.getElementById('prompt-search').value.toLowerCase();
    let filteredPrompts = window.promptData;

    // Filtra por categorias selecionadas
    if (selectedCategories.length > 0) {
        filteredPrompts = filteredPrompts.filter(prompt =>
            selectedCategories.every(category => prompt.tags.includes(category))
        );
    }

    // Filtra por texto de pesquisa
    if (query) {
        filteredPrompts = filteredPrompts.filter(prompt =>
            prompt.nome.toLowerCase().includes(query) ||
            prompt.descricao.toLowerCase().includes(query) ||
            prompt.tags.some(tag => tag.toLowerCase().includes(query))
        );
    }

    displayPrompts(filteredPrompts);

    // Atualiza o contador de prompts exibidos
    document.getElementById('prompt-count').textContent = filteredPrompts.length;
}





// Implementa√ß√£o do modo noturno
const themeSwitch = document.getElementById('theme-switch');
const themeIcon = document.getElementById('theme-icon');

// Verifica o tema salvo no localStorage
if (localStorage.getItem('theme') === 'dark') {
    document.documentElement.setAttribute('data-theme', 'dark');
    themeSwitch.checked = true;
    themeIcon.textContent = 'üåô';
}

themeSwitch.addEventListener('change', () => {
    if (themeSwitch.checked) {
        document.documentElement.setAttribute('data-theme', 'dark');
        themeIcon.textContent = 'üåô';
        localStorage.setItem('theme', 'dark');
    } else {
        document.documentElement.setAttribute('data-theme', 'light');
        themeIcon.textContent = 'üåû';
        localStorage.setItem('theme', 'light');
    }
});

// Implementa√ß√£o das categorias
const categories = [
    'C√≥digo', 'Cria√ß√£o de Conte√∫do', 'Software', 'Cyberseguran√ßa', 'Ci√™ncia de Dados', 'Tecnologia', 'An√°lise de Texto',
    'Startups', 'Twitter', 'Marketing', 'Feedback', 'Extra√ß√£o de Dados', 'AI', 'Checar Gram√°tica', 'Livros',
    'Estudantes', 'Escola', 'Trends de Tech', 'Sum√°rio', 'Entrevista de Emprego', 'Conselho de Carreira', 'Curr√≠culo',
    'Youtube', 'Proofreading', 'Escrita', 'Psicologia', 'Colabora√ß√£o', 'Brainstorm', 'Produtividade', 'Procura de Emprego',
    'Filosofia', 'Auto Ajuda', 'Motiva√ß√£o', 'Cursos', 'Pesquisa', 'Story Telling', 'Jogos', 'Visualiza√ß√µes', 'Dados',
    'Engenheiros de Software', 'Empreendedor', 'LinkedIn', 'Gerente de Produto', 'Marca Pessoal', 'Roteiro de V√≠deo',
    'Redes Sociais', 'Im√≥veis', 'Apresenta√ß√£o', 'Coach de Vida', 'Arte', 'Ganchos', 'Guias de Estudo', 'Dicas de Aluguel',
    'Pesquisas', '√âtica', 'Desenvolvimento de Jogos', 'Gest√£o de Prompts', 'Negocia√ß√£o', 'M√∫sica', 'Jur√≠dico', 'Debate',
    'Pesquisa de Mercado', 'Go To Market', 'Reuni√µes', 'SEO', 'Cita√ß√µes Inspiradoras', 'Limpeza de Dados', 'Solu√ß√£o de Problemas',
    'TikTok', 'Ci√™ncia', 'Orat√≥ria', 'Design Gr√°fico', 'Podcast', 'Gerente de Produto', 'Coaching', 'Constru√ß√£o',
    'Compra de Im√≥veis', 'Instagram', 'Contrata√ß√£o', 'Resolu√ß√£o de Conflitos', 'Carreira Corporativa', 'Comunica√ß√£o',
    'Gest√£o do Tempo', 'Pequenos Neg√≥cios', 'Blog', 'Desenvolvimento Web', 'Viagem', 'Finan√ßas', 'Banc√°rio',
    'Regulamenta√ß√µes', 'Cultura', 'Lideran√ßa', 'Treinamento', 'Trabalho Remoto', 'Receitas Culin√°rias', 'Filosofia Alimentar',
    'Restaurante', 'Finan√ßas Pessoais', 'Or√ßamento', 'Investimento', 'Beleza', 'Desenvolvimento Pessoal', 'Gera√ß√£o de Leads',
    'Idiomas', 'Ensino', 'Seguros', 'Medicina', 'Sa√∫de Mental', 'Suporte ao Cliente', 'Cuidados Infantis', 'Pol√≠tica',
    'Desenvolvimento de Apps', 'Freelancer', 'Sa√∫de', 'Equil√≠brio Trabalho-Vida', 'Terapia', 'Governo', 'Viagens de Luxo',
    'Dicas de Fotografia', 'Academia', 'Scrum', 'Acad√™micos', 'Gest√£o', 'Chatbots', 'Ecoturismo', 'ONG', 'Biodiversidade',
    'Esportes', 'Estrat√©gia', 'Criptomoedas', 'A√ß√µes', 'Email', 'Privacidade', 'Educa√ß√£o', 'V√≠deo', 'Apps', 'Moda',
    'E-commerce', 'Feedback de Usu√°rio', 'Economia', 'Networking', 'Hist√≥ria', 'Projetos DIY', 'Franquias',
    'Estrat√©gia de Neg√≥cios', 'Idioma', 'Blockchain', 'Biologia', 'Gest√£o de Programas', 'An√∫ncios', 'Not√≠cias',
    'Gest√£o de Equipes', 'Neg√≥cios', 'Automa√ß√£o', 'Desenvolvimento de Produto', 'Escrita Criativa',
    'Livro de Colorir', 'Mudan√ßa de Carreira', 'Fam√≠lia', 'Paternidade', 'Vendas', 'Renda Passiva', 'Religi√£o', 'Dieta',
    'Impostos', 'Planejamento de Eventos', 'Agile', 'Olheiro', 'Desenvolvimento de Jogadores', 'Marketing de Rede',
    'Excel', 'Entrada de Dados', 'Bem-estar', 'Jardinagem', 'Literatura', 'Acessibilidade', 'Gest√£o de Reputa√ß√£o',
    'Engajamento de Funcion√°rios', 'Decora√ß√£o', 'Design de Interiores', 'YouTube', 'Subs√≠dios', 'Gest√£o de Projetos',
    'Acad√™mico', 'TDAH', 'Agendamento', 'Relacionamentos', 'Roteiro', 'Di√°logo', 'Crian√ßas', 'Resolu√ß√£o de Problemas',
    'Fantasy Sports', 'Gest√£o de Liga', 'Plano de Sa√∫de', 'RH', 'Certifica√ß√£o', 'Criativo', 'Halloween', 'Projetos Criativos',
    'Outline', 'Mindfulness', 'An√°lise', 'Al√≠vio do Estresse', 'Documenta√ß√£o', 'Comunica√ß√£o com Stakeholders',
    'Processo de Encerramento', 'Contabilidade', 'An√°lise de Dados', 'Viagem Solo', 'Guias', 'Criatividade', 'Humor',
    'Animais', 'Previs√µes', 'Engajamento Comunit√°rio', 'Divulga√ß√£o Religiosa', 'Planejamento Estrat√©gico',
    'Crescimento Pessoal', 'Fitness', 'Reda√ß√£o de Subs√≠dios', 'Proposta', 'Gest√£o de Servi√ßos de TI', 'Gest√£o de Problemas',
    'Excel√™ncia Operacional', 'Aposentadoria', 'Seguran√ßa', 'Recrutamento', 'Gest√£o de Talentos', 'Pinterest',
    'Consultoria', 'Trading de Op√ß√µes', 'Assist√™ncia Social', 'Compliance', 'Auditoria', 'Planejamento de Li√ß√µes',
    'Avalia√ß√£o', 'Orienta√ß√£o', 'Gest√£o de Cr√©dito', 'Plano de Neg√≥cios', 'Fintech', 'Sistemas de Pagamento',
    'Insights do Consumidor', 'Matem√°tica', 'TI', 'Enfermagem', 'Marketing de Afiliados', 'API',
    'Marketing Digital', 'Reda√ß√£o de Propostas', 'RFP', 'Desenvolvimento de Neg√≥cios', 'MBA', 'Farmac√™utica',
    'Biotecnologia', 'Contabilidade Forense', 'An√°lise Financeira', 'Financiamento', 'Planejamento', 'ONG',
    'Desenvolvimento Comunit√°rio', 'Suporte Comunit√°rio', 'Capta√ß√£o de Recursos', 'Assistente Virtual', 'Estat√≠stica',
    'Comunidade', 'Document√°rio', 'Interpreta√ß√£o', 'Desenvolvimento Profissional'
];

const mainCategories = categories.slice(0, 20); // Exibe pelo menos 20 categorias
const categoriesList = document.getElementById('categories');
const expandButton = document.getElementById('expand-categories');
let categoriesExpanded = false;

// Lista de categorias selecionadas
let selectedCategories = [];

// Fun√ß√£o para exibir as categorias como caixas de sele√ß√£o
function displayCategories(catList) {
    categoriesList.innerHTML = '';
    catList.forEach(category => {
        const label = document.createElement('label');
        label.classList.add('category-label');

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.value = category;
        checkbox.addEventListener('change', handleCategorySelection);

        label.appendChild(checkbox);
        label.appendChild(document.createTextNode(category));

        categoriesList.appendChild(label);
    });
}
// Atualizar o event listener da pesquisa
document.getElementById('prompt-search').addEventListener('input', filterPrompts);
// Fun√ß√£o para lidar com a sele√ß√£o de categorias
function handleCategorySelection() {
    const checkboxes = document.querySelectorAll('#categories input[type="checkbox"]');
    selectedCategories = [];
    checkboxes.forEach(checkbox => {
        if (checkbox.checked) {
            selectedCategories.push(checkbox.value);
        }
    });
    //filterByCategories();
    filterPrompts();
}
// Fun√ß√£o de filtragem baseada em m√∫ltiplas categorias
function filterByCategories() {
    let filteredPrompts;

    if (selectedCategories.length === 0) {
        filteredPrompts = window.promptData;
    } else {
        filteredPrompts = window.promptData.filter(prompt =>
            // Use 'every' para prompts que contenham todas as categorias selecionadas
            // Use 'some' para prompts que contenham pelo menos uma das categorias selecionadas
            selectedCategories.every(category => prompt.tags.includes(category))
        );
    }

    displayPrompts(filteredPrompts);
}

// Exibe as principais categorias inicialmente
displayCategories(mainCategories);

expandButton.addEventListener('click', () => {
    if (!categoriesExpanded) {
        displayCategories(categories);
        expandButton.textContent = 'Recolher Categorias';
        categoriesExpanded = true;
    } else {
        displayCategories(mainCategories);
        expandButton.textContent = 'Expandir Categorias';
        categoriesExpanded = false;
    }
});

// Estiliza o bot√£o de expandir categorias
expandButton.classList.add('expand-button');

// Implementa√ß√£o da busca de categorias
const searchInput = document.getElementById('search');

searchInput.addEventListener('input', () => {
    const query = searchInput.value.toLowerCase();
    const filteredCategories = categories.filter(category =>
        category.toLowerCase().includes(query)
    );
    displayCategories(filteredCategories);
});

// Filtra os prompts pela categoria selecionada

